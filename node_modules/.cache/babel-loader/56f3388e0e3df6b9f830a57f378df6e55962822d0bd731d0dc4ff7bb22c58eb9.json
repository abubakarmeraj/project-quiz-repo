{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FC\\\\Desktop\\\\project-quiz\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// The hardcoded array of questions and answers.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst quizQuestions = [{\n  question: \"How ready are you for the big day?\",\n  answers: [{\n    text: \"I've memorized the grade boundaries. I'm ready!\",\n    score: 10,\n    emoji: \"💪\"\n  }, {\n    text: \"I've been praying since June. That's my prep.\",\n    score: 30,\n    emoji: \"🙏\"\n  }, {\n    text: \"Ready? I've already accepted my fate. What's there to be ready for?\",\n    score: 60,\n    emoji: \"🤷‍♂️\"\n  }, {\n    text: \"I've been practicing my poker face for my parents. Wish me luck.\",\n    score: 90,\n    emoji: \"😐\"\n  }],\n  warning: null\n}, {\n  question: \"What will you do if your grades are… unexpected?\",\n  answers: [{\n    text: \"Call my teacher and ask for a recount. Immediately.\",\n    score: 80,\n    emoji: \"😤\"\n  }, {\n    text: \"Blame the school's WiFi for distracting me during online lessons.\",\n    score: 70,\n    emoji: \"🤦‍♀️\"\n  }, {\n    text: \"Act like they're exactly what I expected and walk away confidently.\",\n    score: 50,\n    emoji: \"😎\"\n  }, {\n    text: \"Start looking for a new career path... maybe a professional gamer?\",\n    score: 10,\n    emoji: \"🎮\"\n  }],\n  warning: \"Oh boy… this isn’t looking good...\"\n}, {\n  question: \"Do you think you'll see the sunrise on the 20th?\",\n  answers: [{\n    text: \"Of course! I'll be celebrating all night!\",\n    score: 10,\n    emoji: \"🥳\"\n  }, {\n    text: \"I might, but only if I'm not hiding under my bed.\",\n    score: 40,\n    emoji: \"🛌\"\n  }, {\n    text: \"The sunrise? I'm pretty sure I'll be a ghost by then.\",\n    score: 90,\n    emoji: \"👻\"\n  }, {\n    text: \"My parents will make sure I'm up, whether I want to be or not.\",\n    score: 60,\n    emoji: \"⏰\"\n  }],\n  warning: \"Are you sure you want to answer that?\"\n}, {\n  question: \"How will you survive your parents?\",\n  answers: [{\n    text: \"I'll use my newfound 'adult' attitude to discuss my future calmly.\",\n    score: 15,\n    emoji: \"🧠\"\n  }, {\n    text: \"I have a detailed escape plan involving a bicycle and a small backpack.\",\n    score: 80,\n    emoji: \"🏃‍♀️\"\n  }, {\n    text: \"I'll try to distract them with my younger sibling's report card.\",\n    score: 70,\n    emoji: \"😈\"\n  }, {\n    text: \"I will simply cease to exist for a few days. They'll forget.\",\n    score: 90,\n    emoji: \"💨\"\n  }],\n  warning: null\n}];\nconst Quiz = ({\n  onEndQuiz,\n  userName\n}) => {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  // New state to store scores for each question\n  const [answers, setAnswers] = useState({});\n  const currentQuestion = quizQuestions[currentQuestionIndex];\n  const handleAnswerClick = selectedScore => {\n    // Store the score for the current question\n    setAnswers(prevAnswers => ({\n      ...prevAnswers,\n      [currentQuestionIndex]: selectedScore\n    }));\n\n    // Move to the next question\n    if (currentQuestionIndex === quizQuestions.length - 1) {\n      // Calculate the total score and end the quiz\n      const totalScore = Object.values({\n        ...answers,\n        [currentQuestionIndex]: selectedScore\n      }).reduce((sum, score) => sum + score, 0);\n      onEndQuiz(totalScore);\n    } else {\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n    }\n  };\n\n  // New function to go back to the previous question\n  const handlePreviousClick = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(prevIndex => prevIndex - 1);\n    }\n  };\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Get the selected score for the current question, if any\n  const selectedScore = answers[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Okay, \", userName, \", here we go!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-options\",\n      children: currentQuestion.answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `answer-button ${selectedScore === answer.score ? 'selected-answer' : ''}`,\n        onClick: () => handleAnswerClick(answer.score),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"emoji\",\n          children: answer.emoji\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), \" \", answer.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), currentQuestion.warning && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"warning-message\",\n      children: currentQuestion.warning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), currentQuestionIndex > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"previous-button\",\n      onClick: handlePreviousClick,\n      children: \"Previous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(Quiz, \"ILatPGejwxoTHpjxrCZSBw++8gE=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","quizQuestions","question","answers","text","score","emoji","warning","Quiz","onEndQuiz","userName","_s","currentQuestionIndex","setCurrentQuestionIndex","setAnswers","currentQuestion","handleAnswerClick","selectedScore","prevAnswers","length","totalScore","Object","values","reduce","sum","prevIndex","handlePreviousClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","answer","index","onClick","_c","$RefreshReg$"],"sources":["C:/Users/FC/Desktop/project-quiz/src/components/Quiz.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n// The hardcoded array of questions and answers.\r\nconst quizQuestions = [\r\n  {\r\n    question: \"How ready are you for the big day?\",\r\n    answers: [\r\n      { text: \"I've memorized the grade boundaries. I'm ready!\", score: 10, emoji: \"💪\" },\r\n      { text: \"I've been praying since June. That's my prep.\", score: 30, emoji: \"🙏\" },\r\n      { text: \"Ready? I've already accepted my fate. What's there to be ready for?\", score: 60, emoji: \"🤷‍♂️\" },\r\n      { text: \"I've been practicing my poker face for my parents. Wish me luck.\", score: 90, emoji: \"😐\" },\r\n    ],\r\n    warning: null,\r\n  },\r\n  {\r\n    question: \"What will you do if your grades are… unexpected?\",\r\n    answers: [\r\n      { text: \"Call my teacher and ask for a recount. Immediately.\", score: 80, emoji: \"😤\" },\r\n      { text: \"Blame the school's WiFi for distracting me during online lessons.\", score: 70, emoji: \"🤦‍♀️\" },\r\n      { text: \"Act like they're exactly what I expected and walk away confidently.\", score: 50, emoji: \"😎\" },\r\n      { text: \"Start looking for a new career path... maybe a professional gamer?\", score: 10, emoji: \"🎮\" },\r\n    ],\r\n    warning: \"Oh boy… this isn’t looking good...\",\r\n  },\r\n  {\r\n    question: \"Do you think you'll see the sunrise on the 20th?\",\r\n    answers: [\r\n      { text: \"Of course! I'll be celebrating all night!\", score: 10, emoji: \"🥳\" },\r\n      { text: \"I might, but only if I'm not hiding under my bed.\", score: 40, emoji: \"🛌\" },\r\n      { text: \"The sunrise? I'm pretty sure I'll be a ghost by then.\", score: 90, emoji: \"👻\" },\r\n      { text: \"My parents will make sure I'm up, whether I want to be or not.\", score: 60, emoji: \"⏰\" },\r\n    ],\r\n    warning: \"Are you sure you want to answer that?\",\r\n  },\r\n  {\r\n    question: \"How will you survive your parents?\",\r\n    answers: [\r\n      { text: \"I'll use my newfound 'adult' attitude to discuss my future calmly.\", score: 15, emoji: \"🧠\" },\r\n      { text: \"I have a detailed escape plan involving a bicycle and a small backpack.\", score: 80, emoji: \"🏃‍♀️\" },\r\n      { text: \"I'll try to distract them with my younger sibling's report card.\", score: 70, emoji: \"😈\" },\r\n      { text: \"I will simply cease to exist for a few days. They'll forget.\", score: 90, emoji: \"💨\" },\r\n    ],\r\n    warning: null,\r\n  },\r\n];\r\n\r\n\r\nconst Quiz = ({ onEndQuiz, userName }) => {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  // New state to store scores for each question\r\n  const [answers, setAnswers] = useState({});\r\n\r\n  const currentQuestion = quizQuestions[currentQuestionIndex];\r\n\r\n  const handleAnswerClick = (selectedScore) => {\r\n    // Store the score for the current question\r\n    setAnswers(prevAnswers => ({\r\n      ...prevAnswers,\r\n      [currentQuestionIndex]: selectedScore\r\n    }));\r\n\r\n    // Move to the next question\r\n    if (currentQuestionIndex === quizQuestions.length - 1) {\r\n      // Calculate the total score and end the quiz\r\n      const totalScore = Object.values({ ...answers, [currentQuestionIndex]: selectedScore }).reduce((sum, score) => sum + score, 0);\r\n      onEndQuiz(totalScore);\r\n    } else {\r\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\r\n    }\r\n  };\r\n\r\n  // New function to go back to the previous question\r\n  const handlePreviousClick = () => {\r\n    if (currentQuestionIndex > 0) {\r\n      setCurrentQuestionIndex(prevIndex => prevIndex - 1);\r\n    }\r\n  };\r\n\r\n  if (!currentQuestion) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  // Get the selected score for the current question, if any\r\n  const selectedScore = answers[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-container\">\r\n      <div className=\"question-text\">\r\n        <p>Okay, {userName}, here we go!</p>\r\n        <p>{currentQuestion.question}</p>\r\n      </div>\r\n      \r\n      <div className=\"answer-options\">\r\n        {currentQuestion.answers.map((answer, index) => (\r\n          <button\r\n            key={index}\r\n            className={`answer-button ${selectedScore === answer.score ? 'selected-answer' : ''}`}\r\n            onClick={() => handleAnswerClick(answer.score)}\r\n          >\r\n            <span className=\"emoji\">{answer.emoji}</span> {answer.text}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      {currentQuestion.warning && (\r\n        <div className=\"warning-message\">{currentQuestion.warning}</div>\r\n      )}\r\n\r\n      {/* Conditionally render the Previous button */}\r\n      {currentQuestionIndex > 0 && (\r\n        <button className=\"previous-button\" onClick={handlePreviousClick}>\r\n          Previous\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quiz;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}